var R=process.env.VITE_API_BASE_URL||"http://localhost:8080/api/v1",A=3e4,m=class{baseURL;timeout;authToken=null;constructor(t,s=A){this.baseURL=t,this.timeout=s,this.authToken=localStorage.getItem("homegenie_auth_token")}setAuthToken(t){this.authToken=t,t?localStorage.setItem("homegenie_auth_token",t):localStorage.removeItem("homegenie_auth_token")}async makeRequest(t,s={}){let n=`${this.baseURL}${t}`,a={"Content-Type":"application/json",Accept:"application/json",...s.headers||{}};this.authToken&&(a.Authorization=`Bearer ${this.authToken}`);let i=new AbortController,u=setTimeout(()=>i.abort(),this.timeout);try{let r=await fetch(n,{...s,headers:a,signal:i.signal});if(clearTimeout(u),!r.ok){let d=await r.json().catch(()=>({error:`HTTP ${r.status}: ${r.statusText}`,code:"HTTP_ERROR",timestamp:new Date().toISOString()}));throw r.status===401&&(this.setAuthToken(null),window.location.href="/login"),new c(d.error,r.status,d)}return(await r.json()).data}catch(r){throw clearTimeout(u),r instanceof DOMException&&r.name==="AbortError"?new c("Request timeout",408,{timeout:this.timeout}):r instanceof c?r:new c(r instanceof Error?r.message:"Unknown error occurred",500,{originalError:r})}}async get(t,s){let n=new URL(`${this.baseURL}${t}`);return s&&Object.entries(s).forEach(([a,i])=>{i!=null&&n.searchParams.append(a,String(i))}),this.makeRequest(t+n.search,{method:"GET"})}async post(t,s){return this.makeRequest(t,{method:"POST",body:s?JSON.stringify(s):void 0})}async put(t,s){return this.makeRequest(t,{method:"PUT",body:s?JSON.stringify(s):void 0})}async patch(t,s){return this.makeRequest(t,{method:"PATCH",body:s?JSON.stringify(s):void 0})}async delete(t){return this.makeRequest(t,{method:"DELETE"})}},c=class extends Error{status;code;details;constructor(t,s=500,n){super(t),this.name="ApiError",this.status=s,this.code=n?.code||"API_ERROR",this.details=n}},e=new m(R),y=class{static async login(t){let s=await e.post("/auth/login",t);return e.setAuthToken(s.token),s}static async register(t){let s=await e.post("/auth/register",t);return e.setAuthToken(s.token),s}static async logout(){try{await e.post("/auth/logout")}finally{e.setAuthToken(null)}}static async refreshToken(){let t=await e.post("/auth/refresh");return e.setAuthToken(t.token),t}static async getCurrentUser(){return e.get("/auth/me")}static async updateProfile(t){return e.put("/auth/profile",t)}static async changePassword(t,s){return e.post("/auth/change-password",{currentPassword:t,newPassword:s})}static async forgotPassword(t){return e.post("/auth/forgot-password",{email:t})}static async resetPassword(t,s){return e.post("/auth/reset-password",{token:t,newPassword:s})}},l=class{static async getTasks(t){return e.get("/tasks",t)}static async getTask(t){return e.get(`/tasks/${t}`)}static async createTask(t){return e.post("/tasks",t)}static async updateTask(t,s){return e.put(`/tasks/${t}`,s)}static async deleteTask(t){return e.delete(`/tasks/${t}`)}static async completeTask(t){return e.patch(`/tasks/${t}/complete`)}static async getTaskHistory(t){return e.get(`/tasks/${t}/history`)}static async getUpcomingTasks(t=7){return e.get("/tasks/upcoming",{days:t})}static async getOverdueTasks(){return e.get("/tasks/overdue")}},h=class{static async getProperties(t){return e.get("/properties",t)}static async getProperty(t){return e.get(`/properties/${t}`)}static async createProperty(t){return e.post("/properties",t)}static async updateProperty(t,s){return e.put(`/properties/${t}`,s)}static async deleteProperty(t){return e.delete(`/properties/${t}`)}static async getPropertyTasks(t,s){return e.get(`/properties/${t}/tasks`,s)}static async getPropertyMaintenanceHistory(t){return e.get(`/properties/${t}/maintenance-history`)}static async addMaintenanceRecord(t,s){return e.post(`/properties/${t}/maintenance-history`,s)}},T=class{static async getNotifications(t){return e.get("/notifications",t)}static async markAsRead(t){return e.patch(`/notifications/${t}/read`)}static async markAllAsRead(){return e.patch("/notifications/read-all")}static async deleteNotification(t){return e.delete(`/notifications/${t}`)}static async clearAllNotifications(){return e.delete("/notifications")}static async getNotificationSettings(){return e.get("/notifications/settings")}static async updateNotificationSettings(t){return e.put("/notifications/settings",t)}static async testNotification(t){return e.post("/notifications/test",{type:t})}},P=class{static async getDashboardStats(){return e.get("/analytics/dashboard")}static async getTaskAnalytics(t="month"){return e.get("/analytics/tasks",{period:t})}static async getPropertyAnalytics(){return e.get("/analytics/properties")}},b=class{static async uploadFile(t,s){let n=new FormData;n.append("file",t),n.append("category",s);let a=await fetch(`${R}/files/upload`,{method:"POST",headers:{Authorization:e.authToken?`Bearer ${e.authToken}`:""},body:n});if(!a.ok)throw new c(`Upload failed: ${a.statusText}`,a.status);return(await a.json()).data}static async deleteFile(t){return e.delete(`/files/${t}`)}},f=class{static async checkHealth(){return e.get("/health")}static async checkDatabase(){return e.get("/health/database")}},p=class{static handleApiError(t){if(t instanceof c)switch(t.code){case"VALIDATION_ERROR":return"Please check your input and try again.";case"AUTHENTICATION_ERROR":return"Please log in to continue.";case"AUTHORIZATION_ERROR":return"You do not have permission to perform this action.";case"NOT_FOUND":return"The requested resource was not found.";case"CONFLICT":return"This action conflicts with existing data.";case"RATE_LIMITED":return"Too many requests. Please wait a moment and try again.";default:return t.message}return t instanceof Error?t.message:"An unexpected error occurred. Please try again."}static isNetworkError(t){return t instanceof c&&(t.status===0||t.status===408||t.message.includes("Failed to fetch")||t.message.includes("timeout"))}static shouldRetry(t){return t instanceof c?t.status===0||t.status===408||t.status>=500&&t.status<600:!1}},k=class{static async withRetry(t,s=3,n=1e3){let a;for(let i=1;i<=s;i++)try{return await t()}catch(u){if(a=u,i===s||!p.shouldRetry(u))throw u;let r=n*Math.pow(2,i-1);await new Promise(g=>setTimeout(g,r))}throw a}};export{P as AnalyticsService,c as ApiError,y as AuthService,p as ErrorHandler,b as FileService,f as HealthService,T as NotificationService,h as PropertyService,k as RetryUtil,l as TaskService,e as httpClient};

# HomeGenie Production Deployment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: homegenie-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: homegenie
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d homegenie"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: homegenie-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    container_name: homegenie-backend-prod
    restart: always
    environment:
      # Database
      DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/homegenie?sslmode=require
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: 24h
      
      # Server Configuration
      PORT: 8080
      ENVIRONMENT: production
      
      # CORS Configuration
      CORS_ORIGINS: ${FRONTEND_DOMAINS}
      
      # File Storage
      FILE_STORAGE_PATH: ./uploads
      MAX_FILE_SIZE: 52428800  # 50MB
      
      # External Services
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # Monitoring
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
      SENTRY_DSN: ${SENTRY_DSN}
      
      # Security
      RATE_LIMIT_ENABLED: true
      MAX_REQUESTS_PER_MINUTE: 60
      
    volumes:
      - backend_uploads:/root/uploads
      - ./logs:/root/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
      args:
        VITE_API_BASE_URL: ${API_BASE_URL}
        VITE_WS_BASE_URL: ${WS_BASE_URL}
        VITE_ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}
        VITE_ENABLE_WEBSOCKETS: true
        VITE_SENTRY_DSN: ${FRONTEND_SENTRY_DSN}
        VITE_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
    container_name: homegenie-frontend-prod
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: homegenie-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 32M

  # Database backup service
  postgres-backup:
    image: postgres:15-alpine
    container_name: homegenie-backup
    restart: "no"
    environment:
      POSTGRES_DB: homegenie
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    command: >
      sh -c "
        while true; do
          sleep 86400
          pg_dump -h postgres -U ${DB_USER:-postgres} -d homegenie > /backups/backup-$$(date +%Y%m%d-%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
        done
      "
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: homegenie-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/tmp/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    profiles:
      - monitoring

  # Log collection
  promtail:
    image: grafana/promtail:latest
    container_name: homegenie-promtail
    restart: unless-stopped
    volumes:
      - nginx_logs:/var/log/nginx:ro
      - ./logs:/var/log/app:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    profiles:
      - monitoring

  # Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: homegenie-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prod-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    profiles:
      - monitoring

  # Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: homegenie-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN}
      GF_SERVER_ROOT_URL: https://${GRAFANA_DOMAIN}/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
      - loki
    profiles:
      - monitoring

  # Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: homegenie-jaeger-prod
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: badger
      BADGER_EPHEMERAL: false
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
    volumes:
      - jaeger_data:/badger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    profiles:
      - monitoring

volumes:
  postgres_data:
    name: homegenie_postgres_prod
    driver: local
  redis_data:
    name: homegenie_redis_prod
    driver: local
  backend_uploads:
    name: homegenie_uploads_prod
    driver: local
  nginx_logs:
    name: homegenie_nginx_logs_prod
    driver: local
  loki_data:
    name: homegenie_loki_prod
    driver: local
  prometheus_data:
    name: homegenie_prometheus_prod
    driver: local
  grafana_data:
    name: homegenie_grafana_prod
    driver: local
  jaeger_data:
    name: homegenie_jaeger_prod
    driver: local

networks:
  default:
    name: homegenie_prod_network
    driver: bridge
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homegenie-ingress
  namespace: homegenie
  labels:
    app.kubernetes.io/name: homegenie-ingress
    app.kubernetes.io/instance: homegenie
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"
    
    # Enable gzip compression
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://yourdomain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    
    # Rate limiting (optional)
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # SSL/TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Additional security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "no-referrer-when-downgrade" always;
      add_header Content-Security-Policy "default-src 'self' https: data: blob: 'unsafe-inline'" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - homegenie.yourdomain.com
    - www.homegenie.yourdomain.com
    secretName: homegenie-tls
  rules:
  - host: homegenie.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: homegenie-backend
            port:
              number: 8080
      - path: /health
        pathType: Exact
        backend:
          service:
            name: homegenie-backend
            port:
              number: 8080
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: homegenie-backend
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: homegenie-frontend
            port:
              number: 80
  - host: www.homegenie.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: homegenie-frontend
            port:
              number: 80

---
# Development/Local Ingress (without TLS)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homegenie-ingress-local
  namespace: homegenie
  labels:
    app.kubernetes.io/name: homegenie-ingress-local
    app.kubernetes.io/instance: homegenie
    app.kubernetes.io/component: ingress
    environment: development
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  ingressClassName: nginx
  rules:
  - host: homegenie.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: homegenie-backend
            port:
              number: 8080
      - path: /health
        pathType: Exact
        backend:
          service:
            name: homegenie-backend
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: homegenie-frontend
            port:
              number: 80

---
# ClusterIssuer for Let's Encrypt (requires cert-manager)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: letsencrypt
    app.kubernetes.io/component: certificate-issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@yourdomain.com  # Replace with your email
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Staging ClusterIssuer for testing
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app.kubernetes.io/name: letsencrypt-staging
    app.kubernetes.io/component: certificate-issuer
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@yourdomain.com  # Replace with your email
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Network Policy for Ingress Traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: homegenie-ingress-policy
  namespace: homegenie
  labels:
    app.kubernetes.io/name: homegenie-network-policy
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: homegenie
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080  # Backend
    - protocol: TCP
      port: 3000  # Frontend
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: homegenie-frontend
    to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: homegenie-backend
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all outbound traffic for external APIs
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53
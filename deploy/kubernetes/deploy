#!/bin/bash

# HomeGenie Kubernetes Deployment Script
# This script helps deploy HomeGenie to a Kubernetes cluster using Kustomize

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
ENVIRONMENT="development"
NAMESPACE=""
DRY_RUN=false
VERBOSE=false
FORCE=false
SKIP_VERIFY=false
TIMEOUT="300s"
WAIT=true

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    cat << EOF
HomeGenie Kubernetes Deployment Script

USAGE:
    ./deploy [OPTIONS]

OPTIONS:
    -e, --environment ENV    Deployment environment (development, staging, production)
                            Default: development
    -n, --namespace NS       Kubernetes namespace (overrides environment default)
    -d, --dry-run           Show what would be deployed without applying
    -v, --verbose           Show verbose output
    -f, --force             Force deployment even if validation fails
    -s, --skip-verify       Skip pre-deployment verification
    -t, --timeout DURATION  Timeout for deployment operations (default: 300s)
    --no-wait               Don't wait for rollout to complete
    -h, --help              Show this help message

ENVIRONMENTS:
    development   Local development deployment
    staging       Staging environment deployment  
    production    Production environment deployment

EXAMPLES:
    ./deploy                                    # Deploy to development
    ./deploy -e staging                         # Deploy to staging
    ./deploy -e production -v                   # Deploy to production with verbose output
    ./deploy -d -e production                   # Dry run for production
    ./deploy -e development -n my-namespace     # Deploy to custom namespace

PREREQUISITES:
    - kubectl configured and connected to target cluster
    - kustomize (or kubectl with kustomize support)
    - Required secrets configured (see README.md)

EOF
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check kubectl
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    
    # Check cluster connectivity
    if ! kubectl cluster-info &> /dev/null; then
        print_error "Cannot connect to Kubernetes cluster. Check your kubeconfig."
        exit 1
    fi
    
    # Check kustomize (either standalone or in kubectl)
    if ! command -v kustomize &> /dev/null && ! kubectl kustomize --help &> /dev/null; then
        print_error "kustomize is not available. Install kustomize or use kubectl 1.14+"
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Function to set namespace based on environment
set_namespace() {
    if [[ -z "$NAMESPACE" ]]; then
        case "$ENVIRONMENT" in
            development)
                NAMESPACE="homegenie-dev"
                ;;
            staging)
                NAMESPACE="homegenie-staging"
                ;;
            production)
                NAMESPACE="homegenie-prod"
                ;;
            *)
                NAMESPACE="homegenie"
                ;;
        esac
    fi
}

# Function to verify environment-specific requirements
verify_environment() {
    if [[ "$SKIP_VERIFY" == "true" ]]; then
        print_warning "Skipping environment verification"
        return
    fi
    
    print_status "Verifying environment: $ENVIRONMENT"
    
    case "$ENVIRONMENT" in
        production)
            print_status "Checking production requirements..."
            
            # Check if we're deploying to the right cluster
            CLUSTER_NAME=$(kubectl config current-context)
            if [[ ! "$CLUSTER_NAME" =~ prod|production ]]; then
                print_warning "Current cluster context '$CLUSTER_NAME' doesn't appear to be production"
                if [[ "$FORCE" != "true" ]]; then
                    print_error "Use --force to override this check"
                    exit 1
                fi
            fi
            
            # Check for production secrets
            if ! kubectl get secret homegenie-secrets -n "$NAMESPACE" &> /dev/null; then
                print_warning "Production secrets not found. They will be created from overlay."
            fi
            ;;
            
        staging)
            print_status "Checking staging requirements..."
            
            # Verify staging cluster
            CLUSTER_NAME=$(kubectl config current-context)
            if [[ "$CLUSTER_NAME" =~ prod|production ]]; then
                print_error "Cannot deploy staging to production cluster"
                exit 1
            fi
            ;;
            
        development)
            print_status "Development environment - minimal checks"
            ;;
            
        *)
            print_error "Unknown environment: $ENVIRONMENT"
            exit 1
            ;;
    esac
    
    print_success "Environment verification passed"
}

# Function to deploy using kustomize
deploy_with_kustomize() {
    local overlay_path="overlays/$ENVIRONMENT"
    
    if [[ ! -d "$overlay_path" ]]; then
        print_error "Overlay directory not found: $overlay_path"
        exit 1
    fi
    
    print_status "Deploying HomeGenie to $ENVIRONMENT environment..."
    print_status "Using overlay: $overlay_path"
    print_status "Target namespace: $NAMESPACE"
    
    # Build kustomize command
    if command -v kustomize &> /dev/null; then
        KUSTOMIZE_CMD="kustomize build $overlay_path"
    else
        KUSTOMIZE_CMD="kubectl kustomize $overlay_path"
    fi
    
    # Apply command
    APPLY_CMD="kubectl apply -f -"
    if [[ "$DRY_RUN" == "true" ]]; then
        APPLY_CMD="kubectl apply --dry-run=client -f -"
        print_status "Running in dry-run mode"
    fi
    
    # Add verbose flag if requested
    if [[ "$VERBOSE" == "true" ]]; then
        APPLY_CMD="$APPLY_CMD --v=6"
    fi
    
    # Execute deployment
    if [[ "$VERBOSE" == "true" ]]; then
        print_status "Executing: $KUSTOMIZE_CMD | $APPLY_CMD"
    fi
    
    if eval "$KUSTOMIZE_CMD | $APPLY_CMD"; then
        if [[ "$DRY_RUN" != "true" ]]; then
            print_success "Deployment applied successfully"
        else
            print_success "Dry run completed successfully"
        fi
    else
        print_error "Deployment failed"
        exit 1
    fi
}

# Function to wait for deployment rollout
wait_for_rollout() {
    if [[ "$DRY_RUN" == "true" || "$WAIT" != "true" ]]; then
        return
    fi
    
    print_status "Waiting for deployments to be ready..."
    
    local deployments=(
        "homegenie-backend"
        "homegenie-frontend"
        "postgres"
        "redis"
    )
    
    for deployment in "${deployments[@]}"; do
        print_status "Waiting for deployment: $deployment"
        if kubectl rollout status deployment/"$deployment" -n "$NAMESPACE" --timeout="$TIMEOUT"; then
            print_success "Deployment $deployment is ready"
        else
            print_error "Deployment $deployment failed to become ready within $TIMEOUT"
            exit 1
        fi
    done
}

# Function to show deployment status
show_status() {
    if [[ "$DRY_RUN" == "true" ]]; then
        return
    fi
    
    print_status "Deployment Status:"
    echo
    
    # Show pods
    print_status "Pods:"
    kubectl get pods -n "$NAMESPACE" -o wide
    echo
    
    # Show services
    print_status "Services:"
    kubectl get services -n "$NAMESPACE"
    echo
    
    # Show ingress
    print_status "Ingress:"
    kubectl get ingress -n "$NAMESPACE" 2>/dev/null || echo "No ingress resources found"
    echo
    
    # Show PVCs
    print_status "Persistent Volume Claims:"
    kubectl get pvc -n "$NAMESPACE"
    echo
    
    # Show application URLs
    print_status "Application Access:"
    if kubectl get ingress -n "$NAMESPACE" &> /dev/null; then
        INGRESS_HOSTS=$(kubectl get ingress -n "$NAMESPACE" -o jsonpath='{.items[*].spec.rules[*].host}' 2>/dev/null || echo "")
        if [[ -n "$INGRESS_HOSTS" ]]; then
            for host in $INGRESS_HOSTS; do
                echo "  https://$host"
            done
        fi
    else
        print_status "Use port-forward to access services locally:"
        echo "  kubectl port-forward service/homegenie-frontend 3000:80 -n $NAMESPACE"
        echo "  kubectl port-forward service/homegenie-backend 8080:8080 -n $NAMESPACE"
    fi
}

# Function to show useful post-deployment commands
show_helpful_commands() {
    if [[ "$DRY_RUN" == "true" ]]; then
        return
    fi
    
    cat << EOF

Helpful Commands:
  
  # View logs
  kubectl logs -f deployment/homegenie-backend -n $NAMESPACE
  kubectl logs -f deployment/homegenie-frontend -n $NAMESPACE
  
  # Scale deployments
  kubectl scale deployment homegenie-backend --replicas=3 -n $NAMESPACE
  
  # Port forward for local access
  kubectl port-forward service/homegenie-frontend 3000:80 -n $NAMESPACE
  kubectl port-forward service/homegenie-backend 8080:8080 -n $NAMESPACE
  
  # Check deployment status
  kubectl get all -n $NAMESPACE
  
  # Update deployment (after new image)
  kubectl rollout restart deployment/homegenie-backend -n $NAMESPACE
  
  # Monitor rollout
  kubectl rollout status deployment/homegenie-backend -n $NAMESPACE

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -n|--namespace)
            NAMESPACE="$2"
            shift 2
            ;;
        -d|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -s|--skip-verify)
            SKIP_VERIFY=true
            shift
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        --no-wait)
            WAIT=false
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Main execution
main() {
    # Change to script directory
    cd "$(dirname "${BASH_SOURCE[0]}")"
    
    print_status "HomeGenie Kubernetes Deployment"
    print_status "Environment: $ENVIRONMENT"
    
    set_namespace
    print_status "Namespace: $NAMESPACE"
    
    check_prerequisites
    verify_environment
    deploy_with_kustomize
    wait_for_rollout
    show_status
    show_helpful_commands
    
    print_success "HomeGenie deployment completed successfully!"
}

# Run main function
main "$@"
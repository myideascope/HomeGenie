# Production monitoring configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: homegenie-monitoring
  labels:
    app.kubernetes.io/name: homegenie-monitoring
    app.kubernetes.io/component: monitoring

---
# Prometheus rules for HomeGenie
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: homegenie-alerts
  labels:
    app.kubernetes.io/name: homegenie-alerts
    app.kubernetes.io/component: monitoring
    prometheus: kube-prometheus
    role: alert-rules
spec:
  groups:
  - name: homegenie.rules
    rules:
    # High error rate
    - alert: HomeGenieHighErrorRate
      expr: |
        (
          rate(http_requests_total{app_kubernetes_io_name="homegenie-backend",code=~"5.."}[5m])
          /
          rate(http_requests_total{app_kubernetes_io_name="homegenie-backend"}[5m])
        ) > 0.05
      for: 5m
      labels:
        severity: critical
        service: homegenie-backend
      annotations:
        summary: "HomeGenie backend has high error rate"
        description: "HomeGenie backend error rate is {{ $value | humanizePercentage }} which is above 5%"
    
    # High response time
    - alert: HomeGenieHighResponseTime
      expr: |
        histogram_quantile(0.95,
          rate(http_request_duration_seconds_bucket{app_kubernetes_io_name="homegenie-backend"}[5m])
        ) > 1
      for: 5m
      labels:
        severity: warning
        service: homegenie-backend
      annotations:
        summary: "HomeGenie backend has high response time"
        description: "HomeGenie backend 95th percentile response time is {{ $value }}s"
    
    # Database connection issues
    - alert: HomeGenieDatabaseDown
      expr: |
        up{app_kubernetes_io_name="postgres"} == 0
      for: 1m
      labels:
        severity: critical
        service: postgres
      annotations:
        summary: "HomeGenie database is down"
        description: "PostgreSQL database for HomeGenie is not responding"
    
    # High memory usage
    - alert: HomeGenieHighMemoryUsage
      expr: |
        (
          container_memory_working_set_bytes{pod=~"homegenie-backend-.*"}
          /
          container_spec_memory_limit_bytes{pod=~"homegenie-backend-.*"}
        ) > 0.9
      for: 5m
      labels:
        severity: warning
        service: homegenie-backend
      annotations:
        summary: "HomeGenie backend high memory usage"
        description: "HomeGenie backend memory usage is {{ $value | humanizePercentage }}"
    
    # High CPU usage
    - alert: HomeGenieHighCPUUsage
      expr: |
        rate(container_cpu_usage_seconds_total{pod=~"homegenie-backend-.*"}[5m]) > 0.8
      for: 10m
      labels:
        severity: warning
        service: homegenie-backend
      annotations:
        summary: "HomeGenie backend high CPU usage"
        description: "HomeGenie backend CPU usage is {{ $value | humanizePercentage }}"
    
    # Pod restart rate
    - alert: HomeGeniePodRestartingTooOften
      expr: |
        increase(kube_pod_container_status_restarts_total{pod=~"homegenie-.*"}[1h]) > 3
      for: 1m
      labels:
        severity: warning
        service: homegenie
      annotations:
        summary: "HomeGenie pod restarting too often"
        description: "Pod {{ $labels.pod }} has restarted {{ $value }} times in the last hour"
    
    # Disk space
    - alert: HomeGenieLowDiskSpace
      expr: |
        (
          kubelet_volume_stats_available_bytes{persistentvolumeclaim=~".*postgres.*"}
          /
          kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~".*postgres.*"}
        ) < 0.1
      for: 5m
      labels:
        severity: critical
        service: postgres
      annotations:
        summary: "HomeGenie database low disk space"
        description: "PostgreSQL volume has only {{ $value | humanizePercentage }} space remaining"

---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: homegenie-dashboard
  labels:
    app.kubernetes.io/name: homegenie-dashboard
    app.kubernetes.io/component: monitoring
    grafana_dashboard: "true"
data:
  homegenie-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "HomeGenie Application Metrics",
        "tags": ["homegenie", "application"],
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{app_kubernetes_io_name=\"homegenie-backend\"}[5m])) by (method, code)",
                "legendFormat": "{{method}} - {{code}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests per second"
              }
            ]
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{app_kubernetes_io_name=\"homegenie-backend\"}[5m])) by (le))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket{app_kubernetes_io_name=\"homegenie-backend\"}[5m])) by (le))",
                "legendFormat": "50th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds"
              }
            ]
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{app_kubernetes_io_name=\"homegenie-backend\",code=~\"5..\"}[5m])) / sum(rate(http_requests_total{app_kubernetes_io_name=\"homegenie-backend\"}[5m]))",
                "legendFormat": "Error Rate"
              }
            ],
            "yAxes": [
              {
                "label": "Percentage",
                "max": 1,
                "min": 0
              }
            ]
          },
          {
            "id": 4,
            "title": "Pod Resource Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(container_memory_working_set_bytes{pod=~\"homegenie-.*\"}) by (pod)",
                "legendFormat": "Memory - {{pod}}"
              },
              {
                "expr": "sum(rate(container_cpu_usage_seconds_total{pod=~\"homegenie-.*\"}[5m])) by (pod)",
                "legendFormat": "CPU - {{pod}}"
              }
            ]
          }
        ]
      }
    }

---
# Production alerting configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-homegenie-config
  labels:
    app.kubernetes.io/name: alertmanager-config
    app.kubernetes.io/component: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@yourdomain.com'
      smtp_auth_username: 'alerts@yourdomain.com'
      smtp_auth_password: 'your-app-password'
    
    route:
      group_by: ['alertname', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'homegenie-team'
      routes:
      - match:
          severity: critical
        receiver: 'homegenie-critical'
      - match:
          service: postgres
        receiver: 'database-team'
    
    receivers:
    - name: 'homegenie-team'
      email_configs:
      - to: 'team@yourdomain.com'
        subject: 'HomeGenie Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}
    
    - name: 'homegenie-critical'
      email_configs:
      - to: 'critical@yourdomain.com'
        subject: 'CRITICAL: HomeGenie Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          CRITICAL Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}
      # Add Slack webhook for critical alerts
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#critical-alerts'
        title: 'HomeGenie Critical Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    
    - name: 'database-team'
      email_configs:
      - to: 'dba@yourdomain.com'
        subject: 'Database Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Database Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}

---
# Network Policy for monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: homegenie-monitoring-policy
  labels:
    app.kubernetes.io/name: monitoring-network-policy
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: homegenie
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080  # Metrics endpoint
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 8080